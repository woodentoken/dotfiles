"___________________________________________________
"___________________/__/\_________/__/\_________/__/\
"____/__/::\_______/__/::\_______/__/:/________/__/:/_
"___/__/:/\:\_____/__/:/\:\_____/__/:/_/\_____/__/:/_/\
"__/__/:/~/::\___/__/:/~/::\___/__/:/_/::\___/__/:/_/:/_
"_/__/:/_/:/\:-_/__/:/_/:/\:\_/__/:/_/:/\:\_/__/:/_/:/_/\
"_\__\:\/:/~/:/_\__\:\/:/__\/_\__\:\/:/~/:/_\__\:\/:/_/:/
"__\__\::/_/:/___\__\::/_______\__\::/_/:/___\__\::/_/:/
"___\__\:\/:/_____\__\:\________\__\/_/:/_____\__\:\/:/
"____\__\::/_______\__\:\_________/__/:/_______\__\::/
"_____\__\/_________\__\/_________\__\/_________\__\/
"
" Turn on syntax highlighting
syntax on
filetype on
filetype plugin on
filetype indent on

" Pick a leader key
let mapleader = "\\"

set magic

" Indentation
set autoindent
set smartindent

" Security
set modelines=0

" Show line numbers
set number

" hide status line in vim
set laststatus=0
hi! link StatusLine Normal
hi! link StatusLineNC Normal
set statusline=%{repeat('─',winwidth('.'))}
if &laststatus > 0
  highlight StatusLine    gui=bold guibg=#c8c8d8 guifg=#151505
  highlight StatusLineNC  gui=reverse guibg=#c8c8d8 guifg=#151505
else
  " Disable StatusLine highlights
  highlight StatusLine    gui=NONE guibg=#1c1c1c guifg=#aaaaaa
  highlight StatusLineNC  gui=NONE guibg=#1c1c1c guifg=#1c1c1c
endif

" Show file stats
set ruler

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn="yes:1"

" Blink cursor on error instead of beeping (grr)
set visualbell

" Use persistent history.
if !isdirectory("/tmp/.vim-undo-dir")
    call mkdir("/tmp/.vim-undo-dir", "", 0700)
endif
set undodir=/tmp/.vim-undo-dir
set undofile

" scroll to next line
set whichwrap=b,s,<,>,h,l,[,]
set backspace=indent,eol,start

" background
set background=dark

" Allow wildmenu
set path+=**
set wildignore+=**/node_modules/**
set wildmenu
set hidden

" Encoding
set encoding=utf-8

" Whitespace and comment formatting
set formatoptions=tqn1
" This prevents the automatic insertion of a comment leader after hitting o or O on a commented line
autocmd FileType * set formatoptions-=cro
set tabstop=2
set softtabstop=2  " number of spaces in tab when editing
set shiftwidth=2
set expandtab
set noshiftround

" fast update time
set updatetime=50

" swapfile
set noswapfile
set nobackup

" Cursor motion
set scrolloff=3
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim

" Rendering
set ttyfast

" mouse
set mouse=a
set ttymouse=sgr

" Status bar
set laststatus=2

" Last line
set showmode
set showcmd

" splitting
set splitright
set splitbelow

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
map <leader><space> :let @/=''<CR> " clear search

" Formatting
map <leader>q gwip

" Locate current file in NERDTree
map <leader>fn :NERDTreeFind<CR>

" Visualize tabs and newlines
set listchars=tab:▸\ ,eol:¬
" Uncomment this to enable by default: set list To enable by default or use
" your leader key + l to toggle on/off Toggle tabs and EOL
map <leader>l :set list!<CR>
map <leader>r :source ~/.vimrc<CR>
set cursorline
set cursorlineopt=number
autocmd ColorScheme * highlight CursorLineNr cterm=bold term=bold gui=bold guibg=NONE ctermbg=NONE

" Color scheme (terminal)
set t_Co=256

" -------------------------------------
" REMAPS
" -------------------------------------

" disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" use tab and shift tab for indent shifting
nnoremap <TAB> >>
nnoremap <S-TAB> <<
vnoremap > >gv
vnoremap < <gv

noremap <Leader>s :sort<CR>

" Move up/down editor lines
nnoremap j gj
nnoremap k gk

" update quickly (and utilize ctrl s)
nnoremap W :update<CR>
nnoremap WQ ZZ
nnoremap WQA :wqa<CR>

" Quickly insert an empty new line without entering insert mode
nnoremap <Leader>o o<Esc>
nnoremap <Leader>O O<Esc>

" Move up/down editor lines but faster
noremap <C-j> 10j
noremap <C-k> 10k

" move to beginning and end of line with ctrl h/l
noremap <C-h> ^
noremap <C-l> $

" don't ever press Q
nnoremap Q <NOP>

" Interact with Copilot
noremap <Leader>c :Copilot<CR>

" Quickly save
noremap <Leader>w :w!<CR>

" execute current line in zsh, show the output in a window
noremap <Leader>z :.w !zsh<CR>
" execute current line in zsh, replace input with output
noremap <Leader>Z :. !zsh<CR>

" remap 0 to first non blank character
map 0 ^

vnoremap <C-h> 10h
vnoremap <C-j> 10j
vnoremap <C-k> 10k
vnoremap <C-l> 10l

" Search and replace for current word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>

" No highlighting shortcut
nnoremap <C-n> :noh<CR><esc>¬

" add jk as escape
inoremap jk <esc>

" Command remaps
command Wqa wqa
command WQa wqa
command W w
command Q q
command Wa wa
command Qa qa

" set the filetype environment variable on enter
autocmd BufEnter * let $ft_exec=&filetype
autocmd BufEnter *.py let $ft_exec='python3'

" noremap <Leader>z :.w !$ft_exec<CR>
" noremap <Leader>Z :. !$ft_exec<CR>

noremap <Leader>X :call Lexecute($ft_exec)<CR>

function! GetVisual() range
  let reg_save = getreg('"')
  let regtype_save = getregtype('"')
  let cb_save = &clipboard
  set clipboard&
  normal! ""gvy
  let selection = getreg('"')
  call setreg('"', reg_save, regtype_save)
  let &clipboard = cb_save
  return selection
endfunction 

" evaluate lines of code within vim, based on the filetype
function! Lexecute(executor)
  let sel=GetVisual()
  " echo sel
  " execute '!' sel '>> new.txt'
  " let old_a=@a
  " normal "ay

  " let v=@a
  " echo v
  "
  let line=getline('.')
  let temp=tempname()
  echo temp

  call writefile([sel], temp)
  " TODO NL symbols are changed to NULs (^@) inserting CR needs to be done before passing file to writefile
  " call writefile([line], temp)

  " execute 'echo' shellescape(a:executor) shellescape(temp)
  execute 'w !' . shellescape(a:executor) shellescape(temp)
  " call delete(temp)
endfunction
  

" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
" let &t_SI = "\e[1 q"
" let &t_EI = "\e[4 q"

" these functions automatically detect pastes in insert mode, and toggle
" paste/nopaste to facilitate
" theoretically, auto paste mode when pasting
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

" compile and run
map <F5> :call CompileRun()<CR>
imap <F5> <Esc>:call CompileRun()<CR>
vmap <F5> <Esc>:call CompileRun()<CR>

func! CompileRun()
exec "w"
if &filetype == 'c'
    exec "!gcc % -o %<"
    exec "!time ./%<"
elseif &filetype == 'cpp'
    exec "!g++ % -o %<"
    exec "!time ./%<"
elseif &filetype == 'java'
    exec "!javac %"
    exec "!time java %"
elseif &filetype == 'sh'
    exec "!time bash %"
elseif &filetype == 'python'
    exec "!time python3 %"
elseif &filetype == 'html'
    exec "!google-chrome % &"
elseif &filetype == 'go'
    exec "!go build %<"
    exec "!time go run %"
elseif &filetype == 'matlab'
    exec "!time octave %"
endif
endfunc
